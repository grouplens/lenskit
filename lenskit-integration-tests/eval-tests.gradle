// Run some high-level integration tests
file('src/it/eval').eachDir { testDir ->
    if (file("$testDir/ignore").exists()) {
        return
    }

    def name = testDir.name
    def camelName = name.replaceAll(~/(?:^|-)(.)/) {
        it[1].toUpperCase()
    }
    task("run$camelName", type: JavaExec, group: 'verification') {
        description "Run the $name tests."
        dependsOn fetchData
        mustRunAfter test // run the JUnit-based tests first, less overhead

        if (file("$testDir/verify.py").exists()) {
            dependsOn "checkPythonInstall"
            onlyIf {
                checkPythonInstall.isValid
            }
        }
    
        ext.testDir = testDir
        ext.workDir = "$buildDir/eval-tests/$name"

        inputs.files testDir, fetchData
        inputs.dir mlDataDir
        outputs.dir workDir
        
        doFirst {
            // clean and re-sync test build
            delete workDir
            copy {
                from testDir
                into workDir
            }
        }

        enableAssertions = true
        workingDir workDir
        classpath configurations.testRuntime
        maxHeapSize '256m'
        main 'org.grouplens.lenskit.cli.Main'
        args '--log-file', 'eval.log', '--log-file-level=DEBUG'
        args 'eval', '-j0'
        // tell it where to find the data
        args "-Dlenskit.movielens.100k=$mlDataDir"
        
        if (project.hasProperty('maxTestHeap')) {
            maxHeapSize project.maxTestHeap
        }
    }

    task("verify$camelName", type: JavaExec, group: 'verification') {
        description "Verify the $name tests."
        dependsOn "run$camelName"
        onlyIf {
            !tasks["run$camelName"].state.skipped
        }

        ext.workDir = "$buildDir/eval-tests/$name"
        inputs.dir workDir
        
        workingDir workDir
        classpath sourceSets.test.runtimeClasspath
        main 'org.grouplens.lenskit.test.VerifyTestRun'
        args workDir

        if (file("$workDir/verify.py").exists()) {
            doLast {
                logger.info 'running Python verification script'
                exec {
                    executable 'python'
                    workingDir workDir
                    args 'verify.py'
                }
            }
        }
    }

    if (!skipSlowTests) {
        check.dependsOn "verify$camelName"
    }
}

test.onlyIf { !skipSlowTests }

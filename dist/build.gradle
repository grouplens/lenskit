plugins {
    id "org.ysb33r.ivypot" version "0.3.5"
}

import java.util.zip.ZipFile

evaluationDependsOn ':lenskit-cli'
evaluationDependsOn ':lenskit-integration-tests'
evaluationDependsOn ':lenskit-gradle'

apply plugin: 'base'
apply plugin: 'distribution'
ext.cliProject = project(':lenskit-cli')

repositories {
    mavenCentral()
}
configurations {
    repo
}
dependencies {
    repo project(':lenskit-cli')
    repo project(':lenskit-gradle')
}

// aggregate license info and notices from dependencies
task notices(group: 'build') {
    ext.noticeFile = "$buildDir/NOTICE.txt"
    inputs.files configurations.runtime
    outputs.file noticeFile

    doFirst {
        mkdir buildDir
    }
    doLast {
        def cfg = configurations.runtime.resolvedConfiguration
        file(noticeFile).withPrintWriter { out ->
            out.println("This file contains the notices required by the libraries used by LensKit.")
            out.println()

            cfg.resolvedArtifacts*.file.each { File jar ->
                def zip = new ZipFile(jar)
                try {
                    def noticeEntry = zip.getEntry("META-INF/NOTICE.txt")
                    if (noticeEntry != null) {
                        def notice = zip.getInputStream(noticeEntry).text
                        out.println("${jar.name}:")
                        notice.eachLine { line ->
                            out.println("    ${line}")
                        }
                        out.println()
                    }
                } finally {
                    zip.close()
                }
            }
        }
    }
}

task startScripts(type: CreateStartScripts) {
    outputDir = file("$buildDir/scripts")
    mainClassName = 'org.lenskit.cli.Main'
    applicationName = 'lenskit'
    classpath = cliProject.jar.outputs.files + cliProject.configurations.runtime
}

distTar {
    extension 'tgz'
    compression Compression.GZIP
}

build.dependsOn installDist

if (hasProperty('lenskit.install.dir')) {
    installDist.destinationDir = rootProject.file(getProperty('lenskit.install.dir'))
}

syncRemoteRepositories {
    dependsOn ':lenskit-integration-tests:makeTestRepo'
    inputs.files project(':lenskit-integration-tests').tasks['makeTestRepo']

    repoRoot = "$buildDir/offline-repo"

    repositories {
        maven {
            url uri(rootProject.file('build/test-repo'))
        }
        mavenCentral()
    }

    configurations 'repo'
}

distributions {
    main {
        baseName = 'lenskit'
        contents {
            from(startScripts) {
                into 'bin'
            }
            from notices
            from(project(':lenskit-cli').tasks['renderManPages']) {
                into 'man'
            }
            from(rootProject.tasks['javadoc']) {
                into 'javadoc'
            }
            from(startScripts.classpath) {
                into 'lib'
            }
        }
    }
    maven {
        baseName = 'lenskit-repo'
        contents {
            from syncRemoteRepositories
        }
    }
}

/*
 * Tests for the distributions.
 */

// Test 1: evaluating using the local Maven repository
task prepEvaluate(type: Copy) {
    from 'src/it/gradle/evaluate'
    into "$buildDir/test-evaluate"
}
task testEvaluate(group: 'test', type: GradleBuild) {
    def itProject = project(':lenskit-integration-tests')
    inputs.files syncRemoteRepositories
    inputs.files prepEvaluate
    inputs.files itProject.tasks['fetchData']

    dir = prepEvaluate.destinationDir
    tasks = ['check']
    startParameter.projectProperties['ratingsFile'] = "$itProject.mlDataDir/u.data"
    startParameter.projectProperties['lenskitVersion'] = project.version
    startParameter.projectProperties['localRepoURI'] = uri(syncRemoteRepositories.repoRoot)
}

check.dependsOn testEvaluate

#parse("relnotes.vm")
#stdHeader("2.1", "22")

## General Changes

-   Added `lenskit-all` module so you can easily depend on all of LensKit with a single
    dependency.

-   Added `LenskitInfo` class, providing access to information about LensKit.  Currently, it
    provides access to the Git revisions that are included in the build.  This works with released
    binaries of LensKit, and versions built from Git sources; it will not work from tarball builds.

-   Fixed equality and hashing on ratings to be consistently correct.

## Data Access

-   New methods to more easily construct DAOs (#issue(346))

-   `Rating` class now has `hasValue()` and `getValue()` methods for convenience.

-   **Incompatible change:** `ItemEventDAO` now has a `streamEventsByItem` method, corresponding
    to the orthogonal methods on `UserEventDAO`.  Custom DAO implementations will need to provide
    this new method.

-   **Incompatible change:** The `UserEventDAO` and `ItemEventDAO` classes now have type-filtered
    versions of their `streamEventsByUser` and `streamEventsByItem` methods.  Implementers will need
    to implement these new methods.

## Configuration

-   Added `LenskitRecommenderEngineBuilder` and `LenskitRecommenderEngineLoader`.

    * Better interface for configuring build & load of recommender engines.

    * Allow multiple configurations to contribute to an engine.

    * Allow configurations to be removed (to remove e.g. DAOs from the model graph) and re-added
      to support building & serializing a model with one data access config and loading it with
      a different one.


-   Added `addComponent` methods to configuration contexts (#issue(457))

-   RNG now configured via dependency injection.

-   Fixed class loader problems with deserializing recommender models (#issue(434)).

## CLI

LensKit now has a command-line tool, `lenskit`, included in the binary distribution.  This provides
a lot of utilities for working with LensKit data and configurations, and is the new entry point for
running the evaluator (`lenskit-eval` is now deprecated).

This is in the `lenskit-cli` package, replacing `lenskit-package` as the source of the binary
distribution of LensKit.

## Algorithms

-   Updated user-user CF to be simpler & make better use of new DAOs (#issue(356)).

-   Refactored item-item model build:

    - Build the context with a provider rather than injecting a factory.

    - Use the strategy pattern to abstract sparse vs. non-sparse iteration, allowing sparse
      iteration to be disabled by overriding the default provider.

    - Better logging of the item-item model build process.

-   Significantly sped up user-user CF.

## Evaluator

-   The evaluator now supports loading algorithms from config files in both train-test
    and graph dumping tasks (#issue(406)).

-   In single-threaded mode, run eval tasks on the same thread as the evaluator (#issue(426)).

-   The evaluator now detects when two or more algorithm configurations have the same shared components, and only builds those components once.  A cache directory can be used to cache these objects on disk; specify this with the `cache` directive in `trainTest`.  One consequence of this is that build times are now meaningless.  This behavior can be disabled, and build times restored to meaning, by writing `separateAlgorithms true` in your `trainTest` block.

## Utilities

-   Remove `TaskGroupRunner` in favor of new `TaskGroup` class.


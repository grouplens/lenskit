import org.grouplens.lenskit.build.*

ext.webUrl = 'http://lenskit.grouplens.org'

configurations {
    allDeps // collect all external dependencies of all modules
}

allprojects {
    group 'org.grouplens.lenskit'
    version '2.1-SNAPSHOT'
    
    ext.groovyVersion = '2.1.5'
    ext.logbackVersion = '1.0.13'
    ext.slf4jVersion = '1.7.6'

    repositories {
        if (properties.get('maven.useLocal', 'false').toBoolean()) {
            mavenLocal()
        }
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    configurations {
        // the 'support' config will be for build helpers (e.g. JavaDoc taglets)
        support
    }

    extensions.create('git', GitExtension)
    apply from: "$rootDir/gradle/travis.gradle"

    // Provide support for forcing configuration deps to be resolved
    task resolveAll
    ciPrep.dependsOn resolveAll

    configurations.all { cfg ->
        def resolve = task("resolve${cfg.name.capitalize()}") {
            description "Resolve dependencies in the $cfg.name configuration."
            doLast {
                logger.info 'resolving {}', cfg.name
                def result = cfg.resolvedConfiguration
                result.rethrowFailure()
                for (f in result.resolvedArtifacts*.file) {
                    logger.info '{} depends on file {}', cfg.name, f
                }
            }
        }
        resolveAll.dependsOn resolve
    }

    ext.skipSlowTests = project.properties.get('tests.skipSlow', 'false').toBoolean()
}

task reportTests(type: TestReport) {
    destinationDir file("$buildDir/reports/all-tests")
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.6'
    sourceSets.all { ss ->
        // generate resources & classes to same dir
        ss.output.resourcesDir = ss.output.classesDir
    }

    // don't package until testing
    jar.mustRunAfter 'test'
    tasks.withType(Upload) { task ->
        // check before uploading. upload, not jar, waits in case a check requires the jar
        task.mustRunAfter 'check'
    }
    // defer javadoc until after the build
    javadoc.mustRunAfter 'classes'

    tasks.withType(JavaCompile).all { task ->
        task.options.encoding = 'UTF-8'
        task.options.fork = true
    }
    compileJava {
        options.deprecation = true
        options.compilerArgs << '-Xlint' << '-Xlint:-processing'
    }
    test {
        maxHeapSize = '512m'
    }
    reportTests.reportOn test

    // some common deps shared by everything
    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        compile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.1'
    }

    apply from: "$rootDir/gradle/class-list.gradle"
    apply from: "$rootDir/gradle/license.gradle"

    if (name != 'lenskit-test') {
        dependencies {
            testCompile project(':lenskit-test')
            testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        }
        test {
            systemProperties listener: 'org.grouplens.lenskit.util.test.LoggingListener'
            systemProperties 'log.file': "$buildDir/test.log"
        }
    }

    configurations.compile.dependencies.all { dep ->
        if (!(dep instanceof ProjectDependency)) {
            rootProject.configurations.allDeps.dependencies << dep
        }
    }
}

// Aggregate documentation
ext.masterProjects = ['lenskit-api', 'lenskit-core', 'lenskit-data-structures',
                      'lenskit-groovy', 'lenskit-eval', 'lenskit-cli',
                      'lenskit-knn', 'lenskit-svd',
                      'lenskit-slopeone', 'lenskit-predict']
task javadoc(type: Javadoc, group: 'build') {
    for (prj in masterProjects) {
        source project(prj).sourceSets.main.allJava
    }
    destinationDir = file("$buildDir/docs/javadoc")
    classpath = configurations.allDeps
    title = "LensKit $version"
}

allprojects {
    dependencies {
        // We need the GroupLens taglets
        support group: 'org.grouplens.common', name: 'common-javadoc', version: '0.8'
    }
    tasks.withType(Javadoc) { task ->
        task.configure {
            options {
                tags 'todo:a:To Do:', 'review:a:Review:'

                // grab the taglets from the support classpath
                tagletPath configurations.support.files.toList()
                taglets 'org.grouplens.javadoc.taglets.ExtraInlineTaglet'
                taglets 'org.grouplens.javadoc.taglets.CompatTaglet'

                jFlags "-Dgrouplens.javadoc.versioning.url=$webUrl/versioning.html"

                group 'General API', 'org.grouplens.lenskit'
                group('Core', 'org.grouplens.lenskit.core',
                      'org.grouplens.lenskit.basic', 'org.grouplens.lenskit.config')
                group('Data Structures', 'org.grouplens.lenskit.vectors',
              'org.grouplens.lenskit.collections', 'org.grouplens.lenskit.symbols',
                      'org.grouplens.lenskit.scored', 'org.grouplens.lenskit.indexes')
                group('Data Access', 'org.grouplens.lenskit.data*',
                      'org.grouplens.lenskit.cursors')
                group('Data Transformation',
                      'org.grouplens.lenskit.baseline*', 'org.grouplens.lenskit.transform*',
                      'org.grouplens.lenskit.vectors.*')
                group('Recommender Implementations',
                      'org.grouplens.lenskit.predict*', 'org.grouplens.lenskit.knn*',
                      'org.grouplens.lenskit.mf*', 'org.grouplens.lenskit.slopeone*')
                group('Recommender Evaluation and Tooling',
                      'org.grouplens.lenskit.eval*',
                      'org.grouplens.lenskit.cli*')
                group('Utility Classes',
                      'org.grouplens.lenskit.util*',
                      'org.grouplens.lenskit.test*', 
                      'org.grouplens.lenskit.inject',
                      'org.grouplens.lenskit.iterative')

                links 'http://fastutil.dsi.unimi.it/docs/'
                links 'http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/'
                links 'http://dev.grouplens.org/grapht/apidocs/'
            }
        }
    }
}

apply from: "$rootDir/gradle/website.gradle"
apply from: "$rootDir/gradle/idea.gradle"

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}

/*
 * Build system for LensKit, and open-source recommender systems toolkit.
 * Copyright 2010-2014 Regents of the University of Minnesota and contributors
 * Work on LensKit has been funded by the National Science Foundation under
 * grants IIS 05-34939, 08-08692, 08-12148, and 10-17697.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither the name of the University of Minnesota nor the names of
 *   its contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
import org.grouplens.lenskit.build.GitExtension

plugins {
    id "org.sonarqube" version "1.0"
}
apply plugin: 'base'
apply plugin: 'project-report'

ext.webUrl = 'http://lenskit.org'

configurations {
    allDeps // collect all external dependencies of all modules
    buildTools
}

task ciPublish {
    description "Runs CI publication tasks (not on Travis)."
}

apply plugin: 'base'

allprojects { project ->
    group 'org.grouplens.lenskit'
    version '2.2.2-SNAPSHOT'
    
    ext.groovyVersion = '2.1.5'
    ext.logbackVersion = '1.0.13'
    ext.slf4jVersion = '1.7.6'
    ext.getConfigProperty = { name, dft ->
        if (project.hasProperty(name)) {
            return project.getProperty(name)
        } else {
            return dft
        }
    }

    repositories {
        if (getConfigProperty('maven.useLocal', 'false').toBoolean()) {
            logger.info 'Using Maven local repository'
            mavenLocal()
        }
        mavenCentral()
        if (project.version.endsWith('-SNAPSHOT')) {
            maven {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
    configurations {
        // the 'support' config will be for build helpers (e.g. JavaDoc taglets)
        support
    }

    tasks.withType(Javadoc).all { task ->
        task.options.encoding = 'UTF-8'
        task.onlyIf {
            !project.getConfigProperty('javadoc.skip', 'false').toBoolean()
        }
    }

    extensions.create('git', GitExtension)
    apply from: "$rootDir/gradle/travis.gradle"

    // Provide support for forcing configuration deps to be resolved
    task resolveAll(group: 'build setup') {
        description 'Resolves and downloads all dependencies'
    }
    ciPrep.dependsOn resolveAll

    configurations.all { cfg ->
        def resolve = task("resolve${cfg.name.capitalize()}") {
            description "Resolve dependencies in the $cfg.name configuration."
            doLast {
                logger.info 'resolving {}#{}', project.path, cfg.name
                def result = cfg.resolvedConfiguration
                result.rethrowFailure()
                for (f in result.resolvedArtifacts*.file) {
                    logger.info '{} depends on file {}', cfg.name, f
                }
            }
        }
        resolveAll.dependsOn resolve
    }

    ext.skipSlowTests = project.getConfigProperty('tests.skipSlow', 'false').toBoolean()
}

task reportTests(type: TestReport) {
    destinationDir file("$buildDir/reports/all-tests")
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
    sourceSets.all { ss ->
        // generate resources & classes to same dir
        ss.output.resourcesDir = ss.output.classesDir
    }

    // don't package until testing
    jar.mustRunAfter 'test'
    tasks.withType(Upload) { task ->
        // check before uploading. upload, not jar, waits in case a check requires the jar
        task.mustRunAfter 'check'
    }
    // defer javadoc until after the build
    javadoc.mustRunAfter 'classes'

    tasks.withType(JavaCompile).all { task ->
        task.options.encoding = 'UTF-8'
        task.options.fork = true
    }
    compileJava {
        options.deprecation = true
        options.compilerArgs << '-Xlint' << '-Xlint:-processing'
    }
    test {
        maxHeapSize = '512m'
        enableAssertions = true
        reports.junitXml.enabled = true
        reports.html.enabled = true
    }
    reportTests.reportOn test

    // some common deps shared by everything
    dependencies {
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        compile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.1'
    }

    apply from: "$rootDir/gradle/class-list.gradle"
    apply from: "$rootDir/gradle/license.gradle"

    if (name != 'lenskit-test') {
        dependencies {
            testCompile project(':lenskit-test')
            testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        }
        test {
            systemProperties listener: 'org.grouplens.lenskit.util.test.LoggingListener'
            systemProperties 'log.file': "$buildDir/test.log"
        }
    }

    configurations.compile.dependencies.all { dep ->
        if (!(dep instanceof ProjectDependency)) {
            rootProject.configurations.allDeps.dependencies << dep
        }
    }
}

apply from: "$rootDir/gradle/javadoc.gradle"

task report(group: 'verification') {
    description 'Run all enabled quality reports.'
}

apply from: "$rootDir/gradle/website.gradle"
apply from: "$rootDir/gradle/lint.gradle"

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}
